local function factionYMLValue(id:int,dataid:string,data:string):
    set yaml value "%{_dataid}%" from "faction-%{_id}%" to "%{_data}%"

local function factionYMLGetValue(id:int,dataid:string) :: string:
    return yaml value "%{_dataid}%" from "faction-%{_id}%" if yaml value "%{_dataid}%" from "faction-%{_id}%" is set
    return "&cData not found!"

function inFaction(p:player) :: boolean:
    return true if (int tag "custom;Faction_ID" of nbt compound from {_p}) is set
    return false

function isLeader(p:player) :: boolean:
    inFaction({_p}) = true
    return true if factionYMLGetValue((int tag "custom;Faction_ID" of nbt compound from {_p}),"leader") = uuid of {_p}
    return false

function factionCreate(p:player,name:string):
    add 1 to {faction.amount}
    set {_id} to {faction.amount}
    load yaml "plugins/Skript/yaml/factions/faction-%{_id}%" as "faction-%{_id}%"
    factionYMLValue({_id},"name",{_name})
    factionYMLValue({_id},"leader",uuid of {_p})
    loop 7 times: 
        factionYMLValue({_id},"members.%loop-number%",{_emptystring}) 
    save yaml "faction-%{_id}%"
    set (int tag "custom;Faction_ID" of nbt compound from {_p}) to {_id}

local function factionDisbandNBT(id:int):
    set {_leader} to yaml value "leader" from "faction-%{_id}%"
    set {_leader} to {_leader} parsed as a offlineplayer
    delete (int tag "custom;Faction_ID" of nbt compound from {_leader})
    loop 7 times:
        set {_member} to yaml value "members" from "faction-%{_id}%"
        {_member} != "<none>"
        delete (int tag "custom;Faction_ID" of nbt compound from {_member})

local function factionDisbandYML(id:int):
    factionYMLValue({_id},"leader",{_emptyString})
    factionYMLValue({_id},"name",{_emptyString})
    loop 7 times:
        factionYMLValue({_id},"members.%loop-value%",{_emptyString})
    save yaml "faction-%{_id}%"

function factionDisband(id:int):
    factionDisbandNBT({_id})
    factionDisbandYML({_id})

function factionRename(id:int,name:string):
    factionYMLValue({_id},"name",{_name})
    save yaml "faction-%{_id}%"

function factionInvite(p:player,t:offlineplayer,id:int):
    {-faction::%uuid of {_t}%::invites::*} does not contain {_id}
    add {_id} to {-faction::%uuid of {_t}%::invites::*}

function factionUninvite(p:player,t:offlineplayer,id:int):
    {-faction::%uuid of {_t}%::invites::*} contains {_id}
    remove {_id} from {-faction::%uuid of {_t}%::invites::*}

function factionGetInvites(p:player,name:string) :: boolean:
    loop {-faction::%uuid of {_p}%::invites::*}:
        broadcast "Inputted Name: %{_name}%, Required Name: %factionYMLGetValue(loop-value,"name")%"
        factionYMLGetValue(loop-value,"name") = {_name}
        set (int tag "custom;Faction_ID" of nbt compound from {_p}) to loop-value
        return true
    return false

local function factionAddMember(p:player,id:int):
    loop 7 times:
        set {_lv} to factionYMLGetValue({_id},"members.%loop-value%")
        {_lv} = "<none>"
        factionYMLValue({_id},"members.%loop-value%",uuid of {_p})
        remove {_id} from {-faction::%uuid of {_p}%::invites::*}
        stop loop
    save yaml "faction-%{_id}%"

function factionKick(p:player,t:offlineplayer,id:int):
    loop 7 times:
        set {_member} to factionYMLGetValue({_id},"members.%loop-value%")
        {_member} = uuid of {_t}
        delete (int tag "custom;Faction_ID" of nbt compound from {_member} parsed as player)
        factionYMLValue({_id},"members.%loop-number%",{_emptystring})
        stop loop
    save yaml "faction-%{_id}%"

function factionChat(p:player,id:int,t:string):
    loop all players where [(int tag "custom;Faction_ID" of nbt compound from input) = {_id}]:
        send "&8[&f%factionYMLGetValue({_id},"name")%&8] >> %{_t}%" to loop-value

function factionToggle(p:player):
    if (tag "Faction_Chat" of nbt compound from {_p}) is not set:
        set (tag "Faction_Chat" of nbt compound from {_p}) to "true"
        stop
    (tag "Faction_Chat" of nbt compound from {_p}) = "true"
    delete (tag "Faction_Chat" of nbt compound from {_p})

command faction <string> [<string>]:
    trigger:
        if arg-1 is set:
            set {_name} to factionYMLGetValue((int tag "custom;Faction_ID" of nbt compound from player),"name")
            set {_id} to (int tag "custom;Faction_ID" of nbt compound from player)
        if arg-1 = "create":
            arg-2 is set
            if length of arg-2 > 16:
                send "<##E34234>&lSYSTEM &7» Faction name must be under 16 characters." to player
                stop
            inFaction(player) = false
            factionCreate(player,arg-2)
            send "<##E34234>&lSYSTEM &7» Faction &f%arg-2% &7has been created." to player
        else if arg-1 = "accept":
            arg-2 is set
            if inFaction(player) = true:
                send "Already in a faction" to player
                stop
            if factionGetInvites(player,arg-2) = false:
                send "you are not invited to that faction" to player
                stop
            factionGetInvites(player,arg-2) = true
            set {_id} to (int tag "custom;Faction_ID" of nbt compound from player)
            set {_name} to factionYMLGetValue({_id},"name")
            factionAddMember(player,{_id})
            send "joined faction %{_name}%" to player
        else if arg-1 = "decline":
            arg-2 is set
            factionUninvite(player,player,arg-2 parsed as integer)
            send "declined invite" to player
        else if arg-1 = "disband":
            if arg-2 = "confirm":
                factionDisband({_id})
                send "<##E34234>&lSYSTEM &7» Faction &f%{_name}% &7has been disbanded." to player
                stop
            send "<##E34234>&lSYSTEM &7» Confirm this action by doing /faction disband confirm" to player
        else if arg-1 = "rename":
            arg-2 is set
            if isLeader(player) = false:
                send "<##E34234>&lSYSTEM &7» Must be the leader of your faction." to player
                stop
            if length of arg-2 > 16:
                send "<##E34234>&lSYSTEM &7» Faction name must be under 16 characters." to player
                stop
            factionRename({_id},arg-2)
            send "<##E34234>&lSYSTEM &7» Faction has been renamed to &f%arg-2%&7." to player
        else if arg-1 = "invite":
            arg-2 is set
            if isLeader(player) = false:
                send "<##E34234>&lSYSTEM &7» Must be the leader of your faction." to player
                stop
            set {_arg-2} to (arg-2 parsed as offlineplayer)
            if {_arg-2} = player:
                send "cannot invite yourself" to player
                stop
            inFaction({_arg-2}) = false
            if {_arg-2} is online:
                {-faction::%uuid of {_arg-2}%::invites::*} does not contain {_id}
                send "invited to faction %{_name}% by %player%" to {_arg-2}
            factionInvite(player,{_arg-2},{_id})
            send "invited %{_arg-2}%" to player
        else if arg-1 = "uninvite":
            arg-2 is set
            if isLeader(player) = false:
                send "<##E34234>&lSYSTEM &7» Must be the leader of your faction." to player
                stop
            set {_arg-2} to (arg-2 parsed as offlineplayer)
            factionUninvite(player,{_arg-2},{_id})
            send "uninvited %{_arg-2}%" to player
        else if arg-1 = "kick":
            if isLeader(player) = false:
                send "<##E34234>&lSYSTEM &7» Must be the leader of your faction." to player
                stop
            factionKick(player,arg-2 parsed as offlineplayer,{_id})
        else if arg-1 = "chat":
            arg-2 is set
            if inFaction(player) = false:
                send "<##E34234>&lSYSTEM &7» Must be in a faction." to player
                stop
            factionChat(player,{_id},arg-2)