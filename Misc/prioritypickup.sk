local function addAttacker(attacker:player,victim:player):
    add (uuid of {_attacker}) to {-attackers.%uuid of {_victim}%::*}

local function deleteAttackers(victim:player):
    set {_uuid} to (uuid of {_victim})
    loop {-attackers.%{_uuid}%::*}:
        delete {-hits.%loop-value%.%{_uuid}%}
    delete {-attackers.%{_uuid}%::*}

local function addDMG(attacker:player,victim:player,dmg:int):
    add {_dmg} to {-damage.%uuid of {_attacker}%.%uuid of {_victim}%}

local function returnHits(victim:player) :: integers:
    set {_uuid} to (uuid of {_victim})
    loop {-attackers.%{_uuid}%::*}:
        add {-damage.%loop-value%.%{_uuid}%} to {_dmgs::*}
    return {_dmgs::*}

local function getHighestDMG(victim:player):
    set {_dmgs::*} to returnHits({_victim})
    set {_highestDMG} to max({_dmgs::*})
    set {_uuid} to (uuid of {_victim})
    loop {-attackers.%{_uuid}%::*}:
        {-damage.%loop-value%.%{_uuid}%} = {_highest}
        set {_attacker} to loop-value
    {_attacker} is set
    deleteAttackers({_victim})
    loop all items in (inventory of {_victim}):
        set (string tag "priority-  ")

on death:
    getHighestDMG(victim)

on damage:
    attacker and victim is a player
    addDMG(attacker,victim,damage)