command /give-item <text>:
	permission: skript.item.give
	trigger:
		if returnItemType(arg-1) is set:
			give player returnItem(arg-1)
			message "<##E34234>&lSYSTEM &7» &fItem Given."
		else:
			message "<##E34234>&lSYSTEM &7» &cThere was an error finding this item. Contact an admin for further information."

on tab complete of "give-item":
	set tab completions for position 1 to (yaml node keys "" from "items")

command /import-item <text> [<boolean>]:
	permission: skript.item.import
	trigger:
		if arg-1 is set:
			player's tool != air
			if arg-2 is true:
				makeItem(arg-1,player's tool)
			else if returnItemType(arg-1) is set:
				updateItem(arg-1,player's tool)
			else:
				makeItem(arg-1,player's tool)
			message "<##E34234>&lSYSTEM &7» &fItem Imported."
			stop
		message "<##E34234>&lSYSTEM &7» &cThere was an error importing this item. Contact an admin for further information."

on tab complete of "import-item":
	set tab completions for position 1 to "<ID>"
	set tab completions for position 2 to "ADMIN STUFF! DONT TOUCH! (force: <boolean>)"
   
command /setitemdescription <text> <text> <text>:
	permission: skript.item.setdescription
	trigger:
		if arg-1 is set:
			returnItemType(arg-1) is set
			arg-2 is set
			arg-3 is set
			setItemInfo(arg-1,"description",arg-3) if arg-2 = "primary"
			setItemInfo(arg-1,"descriptiontwo",arg-3) if arg-2 = "secondary"
			message "<##E34234>&lSYSTEM &7» &fUpdated Item description."
			stop
		message "<##E34234>&lSYSTEM &7» &cThere was an error setting the description."

on tab complete of "setitemdescription":
	set tab completions for position 1 to (yaml node keys "" from "items")
	set tab completions for position 2 to "primary" and "secondary"
	set tab completions for position 3 to "<text>"

on command "/ie enchant" or "/itemedit enchant":
	cancel event
	message "<##E34234>&lSYSTEM &7» &cUse /modifier"

command /modifier <text> <number>:
	permission: skript.item.modifier
	trigger:
		if arg-1 is set:
			player's tool != air
			{item.modifiers::*} contains arg-1
			arg-2 is set
			set tag "modifiers;%arg-1%" of nbt compound from player's tool to arg-2
			message "<##E34234>&lSYSTEM &7» &fModifier set."
			stop
		message "<##E34234>&lSYSTEM &7» &cCould not set Modifier"

on tab complete of "modifier":
	set tab completions for position 1 to {item.modifiers::*}
	set tab completions for position 2 to "<number>"

function makeItem(id: text,item: item):
	delete yaml value "%{_id}%" from "items"
	setItemType({_id},"normal")
	setItemType({_id},"potion") if {_item} is a potion, lingering potion or splash potion 
	setItemItem({_id},stripItem({_item}))
	setItemInfo({_id},"name",name of {_item})
	setItemInfo({_id},"description","")
	setItemInfo({_id},"descriptiontwo","")
	setItemInfo({_id},"nbt","")
	setItemSlots({_id},returnDefaultSlot({_item}))
	loop {item.Attributes::*}:
		setItemAttribute({_id},loop-value,(getItemAttribute({_item},"GENERIC_%capitalized loop-value%") ? 0))
	loop {item.modifiers::*}:
		setItemModifier({_id},loop-value,(returnItemNBTModifier({_item},loop-value) ? 0))
	loop {item.tags::*}:
		setItemTag({_id},loop-value)
	save yaml "items"

function updateItem(id: text,item: item):
	setItemType({_id},"normal")
	setItemType({_id},"potion") if {_item} is a potion, lingering potion or splash potion 
	setItemItem({_id},stripItem({_item}))
	setItemInfo({_id},"name",name of {_item})
	setItemInfo({_id},"nbt","")
	setItemSlots({_id},returnDefaultSlot({_item}))
	loop {item.Attributes::*}:
		setItemAttribute({_id},loop-value,(getItemAttribute({_item},"GENERIC_%capitalized loop-value%") ? 0))
	loop {item.modifiers::*}:
		setItemModifier({_id},loop-value,(returnItemNBTModifier({_item},loop-value) ? 0))
	save yaml "items"


function returnItemNBTModifier(i: item,type: string) :: number:
	return tag "modifiers;%{_type}%" of nbt compound of {_i} 

function returnDefaultSlot(item: item) :: text:
	return "head" if {_item} is a helmets, glass, tinted glass, white glass, light gray glass, gray glass, black glass, brown glass, red glass, orange glass, yellow glass, lime glass, green glass, cyan glass, light blue glass, blue glass, purple glass, magenta glass or pink glass
	return "chest" if {_item} is a chestplate
	return "legs" if {_item} is a leggings
	return "feet" if {_item} is a boots
	return "hand" if {_item} is a swords, pickaxes, shovels, axes or hoes
	return "offhand" if {_item} is a shield
	return "all"

function stripItem(i: item) :: item:
	delete compound list tag "AttributeModifiers" of nbt compound from {_i}
	delete compound list tag "modifiers" of nbt compound from {_i}
	delete tag "Name" of nbt compound from {_i}
	delete tag "Lore" of nbt compound from {_i}
	return {_i}