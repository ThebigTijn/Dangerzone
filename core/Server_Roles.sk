local function returnGroup(p:player) :: string:
    set {_group} to group of {_p}
    set {_firstChar} to first 3 characters of {_group}
    return {_firstChar}

local function returnValidGroup(t:string) :: boolean:
    loop all groups:
        {_t} = loop-value
        return true
    return false

function setGroup(p:player,g:string):
    if {_p} does not have permission "staff.use":
        set group of {_p} to {_g}
        stop
    if (string tag "custom;Group.PreviousRank" of nbt compound from {_p}) is set:
        remove (string tag "custom;Group.PreviousRank" of nbt compound from {_p}) from group of {_p}
    add {_g} to group of {_p}
    set (string tag "custom;Group.PreviousRank" of nbt compound from {_p}) to {_g}

command setgroup <offlineplayer> <string>:
    permission: setgroup.use
    trigger:
        if returnValidGroup(arg-2) = false:
            send "Invalid Group" to player
            stop
        if returnGroup(player) != returnGroup(arg-1):
            send "Insufficient Permissions" to player
            stop
        if arg-1 is online:
            send "<##E34234>&lSYSTEM &7» Your group has been set to &f%arg-2% &7by &f%player%&7." to arg-1
        arg-1 != player
        setGroup(arg-1,arg-2)
        send "<##E34234>&lSYSTEM &7» Sucessfully set group of &f%arg-1% &7to &f%arg-2%." to player

on tab complete of "/setgroup":
    set tab completions for position 1 to all players
    loop all groups:
        set {_firstChar} to first 3 characters of loop-value
        returnGroup(player) = {_firstChar}
        add loop-value to tab completions for position 2