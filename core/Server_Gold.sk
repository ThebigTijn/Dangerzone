function goldSet(p: player,n: integer):
    nbtSet({_p},"gold",{_n})
    updateScoreboard({_p})

function goldGet(p: player) :: integer:
    return nbtGet({_p},"gold") ? 0

function goldAdd(p: player,n: integer):
    goldSet({_p},(goldGet({_p}) + {_n}))

function goldRemove(p: player,n: integer):
    goldSet({_p},(goldGet({_p}) - {_n}))

function goldCheck(p: player,n: integer) :: boolean:
    return true if goldGet({_p}) >= {_n}
    return false


command gold <text> [<text>] [<text>]:
    permission: op
    trigger:
        if arg-1 = "give":
            arg-2 is set
            arg-3 is set
            goldAdd((arg-2 parsed as a player),(arg-3 parsed as a integer))
            message "<##E34234>&lSYSTEM &7» &fGave %arg-2% &8[&f+%floor(arg-3 parsed as a integer)%x&8] &6&lGOLD" to player
        else if arg-1 = "take":
            arg-2 is set
            arg-3 is set
            goldRemove((arg-2 parsed as a player),(arg-3 parsed as a integer))
            message "<##E34234>&lSYSTEM &7» &fTaken from %arg-2% &8[&f-%floor(arg-3 parsed as a integer)%x&8] &6&lGOLD" to player
        else if arg-1 = "reset":
            arg-2 is set
            goldSet((arg-2 parsed as a player),0)
            message "<##E34234>&lSYSTEM &7» &fYou have reset %arg-2%'s balance." to player
        else if arg-1 is "check":
            arg-2 is set
            message "<##E34234>&lSYSTEM &7» &f%arg-2% has &8[&f%goldGet(arg-2 parsed as a player)%x&8] &6&lGOLD" to player

on tab complete of "gold":
    set tab completions for position 1 to "give", "take", "reset" and "check"
    set tab completions for position 2 to all players

command check-gold [<player>]:
    trigger:
        if arg-1 is set:
            arg-1 = a player
            message "<##E34234>&lSYSTEM &7» &f%arg-1%'s current balance &8[&f%floor(goldGet(arg-1))%x&8] &6&lGOLD" to player
        else:
            message "<##E34234>&lSYSTEM &7» &fYou have &8[&f%floor(goldGet(player))%x&8] &6&lGOLD" to player