local function setOxygen(p:player,n:int):
    {_p}.setRemainingAir({_n})

local function returnOxygen(p:player) :: boolean:
    return true if {_p}.getRemainingAir() is between 0 and 300 else false

on region enter:
    region contains "oxygen"
    while "%region at player%" contains "oxygen":
        if returnOxygen(player) = false:
            damage player by 0.1
        else if returnOxygen(player) = true:
            set {_air} to player.getRemainingAir()
            set {_arithmetic} to {_air} - 25
            setOxygen(player,{_arithmetic})
            send action bar "&b%font("oxygen")% &8[&r%textB(10,{_air},300)%&8]" to player
        wait a second

local function pillarOxygen(l:location):
    loop all players in radius 5 of {_l}:
        set {_remainingAir} to loop-value.getRemainingAir()
        if {_remainingAir} > 300:
            setOxygen(loop-value,300)
            stop
        set {_remainingAir} to {_remainingAir}-85
        setOxygen(loop-value,{_remainingAir})
        send action bar "&a%font("gaining oxygen")% &8[&r%textB(10,{_remainingAir},300)%&8]" to loop-value

local function spawnEntity(l:location):
    spawn text display at {_l}:
        set display text of entity to "pillar"
        set {_e} to entity
    while {_e} is alive:
        pillarOxygen({_l})
        wait a second

local function createPillar(b:block):
    set (string tag "custom;pillar" of nbt compound from {_b}) to "true"
    spawnEntity(location of {_b})

local function deletePillar(b:block):
    delete (string tag "custom;pillar" of nbt compound from {_b})
    kill all text displays in radius 1 of {_b}

on place:
    (string tag "pillar" of nbt compound from event-item) = "true"
    createPillar(event-block)

on break:
    (string tag "custom;pillar" of nbt compound from event-block) = "true"
    deletePillar(event-block)