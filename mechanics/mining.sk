import:
	java.util.function.Predicate
	org.bukkit.FluidCollisionMode
	com.comphenix.protocol.ProtocolLibrary
	com.comphenix.protocol.PacketType
	com.comphenix.protocol.wrappers.BlockPosition
	java.util.Random
	java.util.ArrayList
	java.lang.Integer
	org.bukkit.event.block.BlockDamageAbortEvent

on load:
	set {packets::protocolmanager} to ProtocolLibrary.getProtocolManager()

function packets_blockBreakAnimation(players: players, loc: location, stage: number, id: number = 0):
	set {_stage} to 10 if {_stage} > 10

	if {_id} = 0:
		set {_i} to new Random().nextInt(2100000)
	else:
		set {_i} to Integer.parseInt("%{_id} ? 0%")
	set {_pos} to new BlockPosition({_loc}.getBlockX(), {_loc}.getBlockY(), {_loc}.getBlockZ())
	set {_packet} to {packets::protocolmanager}.createPacket(PacketType.Play.Server.BLOCK_BREAK_ANIMATION)
	{_packet}.getBlockPositionModifier().write(0, {_pos})
	{_packet}.getIntegers().write(0, {_i}) # Entity ID
	{_packet}.getIntegers().write(1, Integer.parseInt("%{_stage} ? 1%")) # Stage
	loop {_players::*}:
		{packets::protocolmanager}.sendServerPacket(loop-value, {_packet})

on BlockDamageAbortEvent:
	set {_p} to event.getPlayer()
	delete {-blockLocation::%location of {-playerBlock::%{_p}%}%}
	delete (metadata tag "Break" of {-playerBlock::%{_p}%})
	packets_blockBreakAnimation(all players,location of {-playerBlock::%{_p}%},0)

on arm swing:
	set {_b} to exact target block 
	set {-playerBlock::%{_p}%} to {_b}
	set (metadata tag "Break" of {_b}) to ((metadata tag "Break" of {_b}) + 0.1)
	if (metadata tag "Break" of {_b}) >= 10:
		delete (metadata tag "Break" of {_b})
		packets_blockBreakAnimation(all players,location of {_b},0)
		set block at location of {_b} to cobbled deepslate
	packets_blockBreakAnimation(all players,location of {_b},(metadata tag "Break" of {_b}))